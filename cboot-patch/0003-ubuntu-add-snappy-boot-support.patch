From 0d3afcc535723558ec18ad6a830a3af3cfd11a23 Mon Sep 17 00:00:00 2001
From: Ondrej Kubik <ondrej.kubik@canonical.com>
Date: Thu, 26 Sep 2019 18:07:58 +0200
Subject: [PATCH 3/6] ubuntu: add snappy boot support

Adding loggic and message passing capabilities betweek bootloader and snapd
---
 .../partner/common/lib/linuxboot/rules.mk     |   2 +
 .../common/lib/linuxboot/snappy_boot.c        | 224 ++++++++++++++++++
 .../common/lib/linuxboot/snappy_boot.h        |  25 ++
 .../common/lib/linuxboot/snappy_boot_v1.h     | 149 ++++++++++++
 4 files changed, 400 insertions(+)
 create mode 100644 bootloader/partner/common/lib/linuxboot/snappy_boot.c
 create mode 100644 bootloader/partner/common/lib/linuxboot/snappy_boot.h
 create mode 100644 bootloader/partner/common/lib/linuxboot/snappy_boot_v1.h

diff --git a/bootloader/partner/common/lib/linuxboot/rules.mk b/bootloader/partner/common/lib/linuxboot/rules.mk
index 07248b6..983129f 100644
--- a/bootloader/partner/common/lib/linuxboot/rules.mk
+++ b/bootloader/partner/common/lib/linuxboot/rules.mk
@@ -51,6 +51,8 @@ MODULE_SRCS += \
 	$(LOCAL_DIR)/../../../common/lib/linuxboot/linuxboot_utils.c \
 	$(LOCAL_DIR)/linux_load.c
 
+MODULE_SRCS += $(LOCAL_DIR)/snappy_boot.c
+
 ifneq ($(filter t19x, $(TARGET_FAMILY)),)
 MODULE_SRCS += \
 	$(LOCAL_DIR)/extlinux_boot.c
diff --git a/bootloader/partner/common/lib/linuxboot/snappy_boot.c b/bootloader/partner/common/lib/linuxboot/snappy_boot.c
new file mode 100644
index 0000000..b460014
--- /dev/null
+++ b/bootloader/partner/common/lib/linuxboot/snappy_boot.c
@@ -0,0 +1,224 @@
+/**
+ * Copyright (C) 2019 Canonical Ltd
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+  * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include <stdlib.h>
+#include <debug.h>
+#include <dev/udc.h>
+#include <string.h>
+#include <kernel/thread.h>
+#include <arch/ops.h>
+#include <arch/defines.h>
+#include <malloc.h>
+
+#include <arch/arm.h>
+#include <dev/flash.h>
+#include <partition_parser.h>
+#include <mmc.h>
+
+#include <lib/ptable.h>
+#include <dev/keys.h>
+#include <platform.h>
+#include <target.h>
+
+
+#include "snappy_boot.h"
+#include "smem.h"
+#include "scm.h"
+
+
+static char cmdline_buf[512];
+
+static uint32_t crc32(uint32_t crc, unsigned char *buf, size_t len)
+{
+    int k;
+
+    crc = ~crc;
+    while (len--) {
+        crc ^= *buf++;
+        for (k = 0; k < 8; k++)
+            crc = crc & 1 ? (crc >> 1) ^ 0xedb88320 : crc >> 1;
+    }
+    return ~crc;
+}
+
+
+static int map_bootimg(const SNAP_BOOT_SELECTION_t *boot_select, const char *snap_kernel, const char **bootpart);
+static SNAP_BOOT_SELECTION_t *load_environment();
+static int save_environment(SNAP_BOOT_SELECTION_t *boot_select);
+static SNAP_BOOT_SELECTION_t *load_environment_from_part(const char *partName);
+static int save_environment_to_part(SNAP_BOOT_SELECTION_t *boot_select, const char *partName);
+
+void snap_get_target_boot_params(const char **bootpart, const char **cmdline)
+{
+    char *snap_core, *snap_kernel;
+    char *reboot_reason = NULL;
+    SNAP_BOOT_SELECTION_t *boot_select = load_environment();
+
+    if (boot_select == NULL)
+        return;
+
+    snap_core = boot_select->snap_core;
+    snap_kernel = boot_select->snap_kernel;
+    if ( !strncmp(boot_select->snap_mode, SNAP_MODE_TRY, SNAP_NAME_MAX_LEN)) {
+        strncpy(boot_select->snap_mode, SNAP_MODE_TRYING, SNAP_NAME_MAX_LEN);
+        if (save_environment(boot_select))
+            goto cleanup;
+        if ( strlen(boot_select->snap_try_core)) {
+            snap_core = boot_select->snap_try_core;
+        }
+        if (strlen( boot_select->snap_try_kernel)) {
+            snap_kernel = boot_select->snap_try_kernel;
+        }
+    } else if ( !strncmp(boot_select->snap_mode, SNAP_MODE_TRYING, SNAP_NAME_MAX_LEN)) {
+        boot_select->snap_mode[0] = 0;
+        if (save_environment(boot_select))
+            goto cleanup;
+    }
+    // update boot reason, keep environment value to handle incomplete factory-reset
+    // if all succeeds new environment is restored from backup
+    if ( !strncmp(boot_select->reboot_reason, FACTORY_RESET, strlen(FACTORY_RESET))) {
+      reboot_reason = boot_select->reboot_reason;
+    }
+    map_bootimg(boot_select, snap_kernel, bootpart);
+    if (reboot_reason)
+        snprintf(cmdline_buf, sizeof(cmdline_buf), " snap_core=%s snap_kernel=%s %s ", snap_core, snap_kernel, reboot_reason);
+    else
+        snprintf(cmdline_buf, sizeof(cmdline_buf), " snap_core=%s snap_kernel=%s ", snap_core, snap_kernel);
+    *cmdline = cmdline_buf;
+
+    cleanup:
+        if(boot_select)
+            free(boot_select);
+}
+
+int map_bootimg(const SNAP_BOOT_SELECTION_t *boot_select, const char *snap_kernel, const char **bootpart)
+{
+    for (size_t n = 0; n < SNAP_BOOTIMG_PART_NUM; ++n) {
+        if (!strncmp(boot_select->bootimg_matrix[n][1], snap_kernel, SNAP_NAME_MAX_LEN)) {
+            if (strlen(boot_select->bootimg_matrix[n][0])) {
+                *bootpart = boot_select->bootimg_matrix[n][0];
+                return 0;
+            }
+        }
+    }
+    dprintf(CRITICAL, "snap: map_bootimg: did not find valid boot partition!!!\n");
+    return -1;
+}
+
+// try to load backup env if main fails
+static SNAP_BOOT_SELECTION_t *load_environment()
+{
+    SNAP_BOOT_SELECTION_t *boot_select = load_environment_from_part(SNAP_BOOTSELECT_PARTITION);
+    if (boot_select == NULL) {
+        boot_select = load_environment_from_part(SNAP_BOOTSELECT_PARTITION "bak");
+        // if we successfully loaded backup env, try to save it to main, ignore error
+        if (boot_select)
+            save_environment_to_part( boot_select, SNAP_BOOTSELECT_PARTITION);
+    }
+    return boot_select;
+}
+
+// save always to main and backup env
+static int save_environment(SNAP_BOOT_SELECTION_t *boot_select)
+{
+    // if at least one write works, return success, use two variables, that compiler
+    // does not optimise
+    int r = save_environment_to_part( boot_select, SNAP_BOOTSELECT_PARTITION);
+    int rb = save_environment_to_part( boot_select, SNAP_BOOTSELECT_PARTITION "bak");
+    return r & rb;
+}
+
+static SNAP_BOOT_SELECTION_t *load_environment_from_part(const char *partName)
+{
+    unsigned long long ptn = 0;
+    uint32_t block_size = mmc_get_device_blocksize();
+    uint32_t actual_struct_size, crc;
+    SNAP_BOOT_SELECTION_t *boot_select = NULL;
+    int index = INVALID_PTN;
+    index = partition_get_index(partName);
+    ptn = partition_get_offset(index);
+
+    if(ptn == 0)
+    {
+        dprintf(CRITICAL, "snap: load_environment: ERROR: No %s partition found\n", partName);
+        goto cleanup;
+    }
+
+    actual_struct_size = ROUNDUP(sizeof(SNAP_BOOT_SELECTION_t), block_size);
+    boot_select = malloc(actual_struct_size);
+    if (boot_select == NULL)
+    {
+        dprintf(CRITICAL, "snap: load_environment: ERROR, cannot allocate SNAP_BOOT_SELECTION\n");
+        goto cleanup;
+    }
+
+    mmc_set_lun(partition_get_lun(index));
+    if(mmc_read(ptn, (void *)boot_select, actual_struct_size))
+    {
+        dprintf(CRITICAL, "snap: load_environment(%s): read SNAP_BOOT_SELECTION: ERROR, cannot read Snap boot select info\n", partName);
+        goto cleanup;
+    }
+
+    dprintf(SPEW, "snap: load_environment(%s): read SNAP_BOOT_SELECTION: SUCCESS, read %d bytes\n", partName, actual_struct_size);
+    crc = crc32( 0, (unsigned char *)boot_select, sizeof(SNAP_BOOT_SELECTION_t)-sizeof(uint32_t));
+    if ( boot_select->version != SNAP_BOOTSELECT_VERSION || boot_select->signature != SNAP_BOOTSELECT_SIGNATURE )
+    {
+        dprintf(CRITICAL, "snap: load_environment(%s): ERROR version/signature broken [0x%X] vs [0x%X], [0x%X] vs [0x%X]!\n",
+            partName, boot_select->version, SNAP_BOOTSELECT_VERSION, boot_select->signature, SNAP_BOOTSELECT_SIGNATURE);
+        goto cleanup;
+    }
+    if ( boot_select->crc32 != crc )
+    {
+        dprintf(CRITICAL, "snap: load_environment(%s): ERROR crc32 broken [0x%X] vs [0x%X]!\n", partName, boot_select->crc32, crc );
+        goto cleanup;
+    } else {
+        dprintf(INFO, "snap: load_environment(%s): crc32 sucessfully validated\n", partName );
+    }
+    return boot_select;
+
+    cleanup:
+        if(boot_select)
+            free(boot_select);
+        return NULL;
+}
+
+static int save_environment_to_part( SNAP_BOOT_SELECTION_t *boot_select, const char *partName)
+{
+    unsigned long long ptn = 0;
+    uint32_t block_size = mmc_get_device_blocksize();
+
+    int index = INVALID_PTN;
+
+    ASSERT(boot_select != NULL);
+    boot_select->crc32 = crc32( 0, (unsigned char *)boot_select, sizeof(SNAP_BOOT_SELECTION_t)-sizeof(uint32_t));
+
+    index = partition_get_index(partName);
+    ptn = partition_get_offset(index);
+
+    if(ptn == 0)
+    {
+        dprintf(CRITICAL, "snap: save_environment: ERROR: No %s partition found\n", partName);
+        return -1;
+    }
+
+    if(mmc_write(ptn, ROUNDUP(sizeof(SNAP_BOOT_SELECTION_t), block_size), (void *)boot_select))
+    {
+        dprintf(CRITICAL, "snap: save_environment: ERROR, cannot write SNAP_BOOTSELECT info\n");
+        return -1;
+    }
+    return 0;
+}
diff --git a/bootloader/partner/common/lib/linuxboot/snappy_boot.h b/bootloader/partner/common/lib/linuxboot/snappy_boot.h
new file mode 100644
index 0000000..4d96b93
--- /dev/null
+++ b/bootloader/partner/common/lib/linuxboot/snappy_boot.h
@@ -0,0 +1,25 @@
+/**
+ * Copyright (C) 2019 Canonical Ltd
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#ifndef _BOOTLOADER_SNAP_BOOT_H
+#define _BOOTLOADER_SNAP_BOOT_H
+
+#include "snappy_boot_v1.h"
+
+void snap_get_target_boot_params(const char **bootpart, const char **cmdline);
+
+#endif
diff --git a/bootloader/partner/common/lib/linuxboot/snappy_boot_v1.h b/bootloader/partner/common/lib/linuxboot/snappy_boot_v1.h
new file mode 100644
index 0000000..64c4d54
--- /dev/null
+++ b/bootloader/partner/common/lib/linuxboot/snappy_boot_v1.h
@@ -0,0 +1,149 @@
+/**
+ * Copyright (C) 2019 Canonical Ltd
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#ifndef _BOOTLOADER_SNAP_BOOT_V1_H
+#define _BOOTLOADER_SNAP_BOOT_V1_H
+
+#define SNAP_BOOTSELECT_VERSION   0x00010001
+#define SNAP_BOOTSELECT_SIGNATURE ('S' | ('B' << 8) | ('s' << 16) | ('e' << 24))
+#define SNAP_NAME_MAX_LEN (256)
+#define HASH_LENGTH (32)
+#define SNAP_MODE_TRY "try"
+#define SNAP_MODE_TRYING "trying"
+#define FACTORY_RESET "factory-reset"
+
+/* partition label where boot select structure is stored */
+#define SNAP_BOOTSELECT_PARTITION "snapbootsel"
+
+/* number of available bootimg partitions, min 2 */
+#define SNAP_BOOTIMG_PART_NUM 2
+
+/* snappy bootselect partition format structure */
+typedef struct SNAP_BOOT_SELECTION {
+    /* Contains value BOOTSELECT_SIGNATURE defined above */
+    uint32_t signature;
+    /* snappy boot select version */
+    uint32_t version;
+
+    /* snap_mode, one of: 'empty', "try", "trying" */
+    char snap_mode[SNAP_NAME_MAX_LEN];
+    /* current core snap revision */
+    char snap_core[SNAP_NAME_MAX_LEN];
+    /* try core snap revision */
+    char snap_try_core[SNAP_NAME_MAX_LEN];
+    /* current kernel snap revision */
+    char snap_kernel[SNAP_NAME_MAX_LEN];
+    /* current kernel snap revision */
+    char snap_try_kernel[SNAP_NAME_MAX_LEN];
+
+    /* gadget_mode, one of: 'empty', "try", "trying" */
+    char gadget_mode[SNAP_NAME_MAX_LEN];
+    /* GADGET assets: current gadget assets revision */
+    char snap_gadget[SNAP_NAME_MAX_LEN];
+    /* GADGET assets: try gadget assets revision */
+    char snap_try_gadget [SNAP_NAME_MAX_LEN];
+
+    /**
+     * Reboot reason
+     * optional parameter to signal bootloader alternative reboot reasons
+     * e.g. recovery/factory-reset/boot asset update
+     */
+    char reboot_reason[SNAP_NAME_MAX_LEN];
+
+    /**
+     * Matrix for mapping of boot img partion to installed kernel snap revision
+     *
+     * First column represents boot image partition label (e.g. boot_a,boot_b )
+     *   value are static and should be populated at gadget built time
+     *   or latest at image build time. Values are not further altered at run time.
+     * Second column represents name currently installed kernel snap
+     *   e.g. pi2-kernel_123.snap
+     * initial value representing initial kernel snap revision
+     *   is pupulated at image build time by snapd
+     *
+     * There are two rows in the matrix, representing current and previous kernel revision
+     * following describes how this matrix should be modified at different stages:
+     *  - at image build time:
+     *    - extracted kernel snap revision name should be filled
+     *      into free slow (first row, second row)
+     *  - snapd:
+     *    - when new kernel snap revision is being installed, snapd cycles through
+     *      matrix to find unused 'boot slot' to be used for new kernel snap revision
+     *      from free slot, first column represents partition label to which kernel
+     *      snap boot image should be extracted. Second column is then populated with
+     *      kernel snap revision name.
+     *    - snap_mode, snap_try_kernel, snap_try_core behaves same way as with u-boot
+     *  - bootloader:
+     *    - bootloader reads snap_mode to determine if snap_kernel or snap_kernel is used
+     *      to get kernel snap revision name
+     *      kernel snap revision is then used to search matrix to determine
+     *      partition label to be used for current boot
+     *    - bootloader NEVER alters this matrix values
+     *
+     * [ <bootimg 1 part label> ] [ <kernel snap revison installed in this boot partition> ]
+     * [ <bootimg 2 part label> ] [ <kernel snap revison installed in this boot partition> ]
+     */
+    char bootimg_matrix[SNAP_BOOTIMG_PART_NUM][2][SNAP_NAME_MAX_LEN];
+
+    /* name of the boot image from kernel snap to be used for extraction
+       when not defined or empty, default boot.img will be used */
+    char bootimg_file_name[SNAP_NAME_MAX_LEN];
+
+    /**
+     * Gadget assets: Matrix for mapping of gadget asset partions
+     * Optional boot asset tracking, based on bootloader support
+     * Some boot chains support A/B boot assets for increased robustness
+     * example being A/B TrustExecutionEnvironment
+     * This matrix can be used to track current and try boot assets for
+     * robust updates
+     * Use of Gadget_asset_matrix matches use of Bootimg_matrix
+     *
+     * [ <boot assets 1 part label> ] [ <currently installed assets revison> ]
+     * [ <boot assets 2 part label> ] [ <currently installed assets revision> ]
+     */
+    char gadget_asset_matrix [SNAP_BOOTIMG_PART_NUM][2][SNAP_NAME_MAX_LEN];
+
+    /* unused placeholders for additional parameters to be used  in the future */
+    char unused_key_01 [SNAP_NAME_MAX_LEN];
+    char unused_key_02 [SNAP_NAME_MAX_LEN];
+    char unused_key_03 [SNAP_NAME_MAX_LEN];
+    char unused_key_04 [SNAP_NAME_MAX_LEN];
+    char unused_key_05 [SNAP_NAME_MAX_LEN];
+    char unused_key_06 [SNAP_NAME_MAX_LEN];
+    char unused_key_07 [SNAP_NAME_MAX_LEN];
+    char unused_key_08 [SNAP_NAME_MAX_LEN];
+    char unused_key_09 [SNAP_NAME_MAX_LEN];
+    char unused_key_10 [SNAP_NAME_MAX_LEN];
+    char unused_key_11 [SNAP_NAME_MAX_LEN];
+    char unused_key_12 [SNAP_NAME_MAX_LEN];
+    char unused_key_13 [SNAP_NAME_MAX_LEN];
+    char unused_key_14 [SNAP_NAME_MAX_LEN];
+    char unused_key_15 [SNAP_NAME_MAX_LEN];
+    char unused_key_16 [SNAP_NAME_MAX_LEN];
+    char unused_key_17 [SNAP_NAME_MAX_LEN];
+    char unused_key_18 [SNAP_NAME_MAX_LEN];
+    char unused_key_19 [SNAP_NAME_MAX_LEN];
+    char unused_key_20 [SNAP_NAME_MAX_LEN];
+
+    /* unused array of 10 key - value pairs */
+    char key_value_pairs [10][2][SNAP_NAME_MAX_LEN];
+
+    /* crc32 value for structure */
+    uint32_t crc32;
+} SNAP_BOOT_SELECTION_t;
+
+#endif
-- 
2.17.1

